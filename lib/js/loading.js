"use strict";

function escape(unsafeText) {
  var safeText = $('<div />').text(unsafeText).text();
  return safeText;
}

TTAM.loading = {
  stop: function stop($element, callback) {
    var selectors = '.ttam-loading-box-wrapper, .ttam-loading-pill-wrapper, .ttam-button-loading-wrapper, .ttam-loading-skeleton-wrapper';
    var timing = 150;
    $element.find(selectors).fadeOut(timing, function () {
      $element.find(selectors).remove();
      $element.removeClass('ttam-loadingstate');

      if (typeof callback === 'function') {
        return callback();
      }

      return true;
    });
  },
  button: function button($el, text, style) {
    if (!$el) {
      throw new Error('no element passed in');
    }

    $el.addClass('ttam-loading-button');
    $el.each(function () {
      var $theButton = $(this);
      $theButton.click(function () {
        $theButton.addClass('ttam-loadingstate');

        if (style) {
          $theButton.addClass("mod-loading-".concat(style));
        }

        if (text) {
          var loadingContents = escape("<div class=\"ttam-button-loading-wrapper\"><div class=\"ttam-button-loading\"></div></div>".concat(text));
          $theButton.html(loadingContents);
        } else if ($theButton.find('.ttam-button-loading').length === 0) {
          var _loadingContents = escape('<div class="ttam-button-loading-wrapper"><div class="ttam-button-loading"></div></div>');

          $theButton.prepend(_loadingContents);
        }
      });
    });
    return true;
  },
  box: function box($el, text, style, position) {
    if (!$el) {
      throw new Error('no element passed in');
    }

    text = text || '';
    position = position ? "mod-box-".concat(position) : '';
    $el.each(function () {
      $(this).addClass('ttam-loading-box ttam-loadingstate');

      if ($(this).find('.ttam-loading-box-wrapper').length === 0) {
        var loadingContents = escape("<div class=\"ttam-loading-box-wrapper ".concat(position, "\"><div class=\"ttam-box-loading\"></div><span>").concat(text, "</span></div>"));

        if (style) {
          $(this).addClass("mod-loading-".concat(style));
        }

        $el.prepend(loadingContents);
      }
    });
    return true;
  },
  pill: function pill($el, text, style) {
    if (!$el) {
      throw new Error('no element passed in');
    }

    if (!text) {
      throw new Error('no text passed in');
    }

    $el.addClass('ttam-loading-pill ttam-loadingstate');

    if ($el.find('.ttam-loading-pill-wrapper').length === 0) {
      var loadingContents = escape("<div class=\"ttam-loading-pill-wrapper\"><div class=\"ttam-loading-pill-shape\"><div class=\"ttam-pill-loading\"></div><span>".concat(text, "</span></div></div>"));

      if (style) {
        $el.addClass("mod-loading-".concat(style));
      }

      $el.prepend(loadingContents);
    } else {
      return false;
    }

    return true;
  },
  skeleton: function skeleton($el) {
    if (!$el) {
      throw new Error('no element passed in');
    }

    $el.addClass('ttam-loading-skeleton ttam-loadingstate');

    if ($el.find('.ttam-loading-skeleton-wrapper').length === 0) {
      var contents = '<div class="ttam-loading-skeleton-wrapper"></div>';
      return $el.prepend(contents);
    }

    return true;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
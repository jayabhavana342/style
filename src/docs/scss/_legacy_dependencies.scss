// body.styleguide.components

// Colors
@import '../../lib/scss/ds_colors';
@import 'vars';
@import 'mixins';

// Typography
$avenir-next: "Avenir Next", Helvetica, Roboto, Arial, sans-serif;
$avenir-condensed: "Avenir Next Condensed", Helvetica, Roboto, Arial, sans-serif;
$base-font-family: $avenir-next;
$header-font-family: $base-font-family;

// Font Sizes
// body
$base-font-size: 100%;

// headings
$jumbo-text:        rem(32);
$x-large-text:      rem(28);
$large-text:        rem(24);
$med-large-text:    rem(20);
$medium-text:       rem(18);
$base-text:         rem(16);
$small-text:        rem(15);
$x-small-text:      rem(14);
$tiny-text:         rem(13);
$mini-text:         rem(12);

// mobile
$jumbo-text-mobile: rem(26);
$large-text-mobile: rem(22);

// Font Weights
$font-weight-regular: 400;
$font-weight-medium: 500;
$font-weight-demi: 700;
$font-weight-heavy-bold: 800;

// Line height
$base-line-height: 1.5;
$header-line-height: 1.25;

// Spacing
$base-spacing: 30px;
$small-spacing: $base-spacing / 2;
$mobile-gutter: 6.26%;
$mobile-card-gutter: 2%;
$mobile-card-padding: $mobile-gutter - $mobile-card-gutter;
$utility-bar-padding: 18px;

// Returns the percentage an element needs to reset its parent's percentage
// based padding
// Takes in a percentage
@function reset-padding($percent) {
    @return (((2 * $percent) / (100 - (2 * $percent))) / 2) * 100%;
}

$mobile-gutter-reset: reset-padding($mobile-gutter);
$mobile-card-padding-reset: reset-padding($mobile-card-padding);

// Other Sizes
$base-border-radius: 3px;
$button-border-radius: 100px;
$base-z-index: 0;
$select-box-height: 41px;
$tap-target: 44px;


%non-button {
    background-color: transparent;
    border: 0;
    border-radius: 0;
    height: auto;
    line-height: normal;
    min-width: 0;
    padding: 0;
    text-align: left;
    vertical-align: baseline;
    white-space: normal;
    &:hover {
        background-color: transparent;
    }
}

.unbutton {
    @extend %non-button;
    color: inherit;
    font-weight: $font-weight-regular;
}

.button {
    cursor: pointer;
}

// design_system/_borrowed.scss
// This stuff comes from Bourbon
$em-base: 16px !default;

@mixin ttam-placeholder {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

@function assign-inputs($inputs, $pseudo: null) {
  $list: ();

  @each $input in $inputs {
    $input: unquote($input);
    $input: if($pseudo, $input + ":" + $pseudo, $input);
    $list: append($list, $input, comma);
  }

  @return $list;
}



$prefix-for-webkit:    true !default;
$prefix-for-mozilla:   true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera:     true !default;
$prefix-for-spec:      true !default;

@mixin disable-prefix-for-all() {
  $prefix-for-webkit:    false !global;
  $prefix-for-mozilla:   false !global;
  $prefix-for-microsoft: false !global;
  $prefix-for-opera:     false !global;
  $prefix-for-spec:      false !global;
}

@mixin ttam-prefixer($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      @if $prefix-for-webkit {
        -webkit-#{$property}: $value;
      }
    } @else if $prefix == moz {
      @if $prefix-for-mozilla {
        -moz-#{$property}: $value;
      }
    } @else if $prefix == ms {
      @if $prefix-for-microsoft {
        -ms-#{$property}: $value;
      }
    } @else if $prefix == o {
      @if $prefix-for-opera {
        -o-#{$property}: $value;
      }
    } @else if $prefix == spec {
      @if $prefix-for-spec {
        #{$property}: $value;
      }
    } @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

@mixin ttam-appearance($value) {
  @include ttam-prefixer(appearance, $value, webkit moz ms o spec);
}

a,
.a-link {
    &[href*='//'] {
        &.no-external-icon,
        &.ttam-button,
        &.button {
            &:after {
                content: none !important;
            }
        }
    }
}

@function rem($pxval) {
  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }

  $base: $em-base;
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return ($pxval / $base) * 1rem;
}

@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}

@mixin ttam-triangle($size, $color, $direction) {
  $width: nth($size, 1);
  $height: nth($size, length($size));
  $foreground-color: nth($color, 1);
  $background-color: if(length($color) == 2, nth($color, 2), transparent);
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction == up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
    } @else if $direction == right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;
    } @else if $direction == down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;
    } @else if $direction == left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  } @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $height solid $foreground-color;

    @if $direction == up-right {
      border-left:  $width solid $background-color;
    } @else if $direction == up-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction == down-right {
      border-left:  $width solid $background-color;
    } @else if $direction == down-left {
      border-right: $width solid $background-color;
    }
  } @else if ($direction == inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  } @else if ($direction == inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  } @else if ($direction == inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}
